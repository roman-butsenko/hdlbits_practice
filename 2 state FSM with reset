module top_module(
    input clk,
    input areset,    // Asynchronous reset to state B
    input in,
    output out);//  

    parameter A=0, B=1; 
    reg state, next_state;

    /*
    hdlbits did try to help me, but I didn't take a hint,
    comennted this piece if logic and wrote it like this
    always @(*) begin    // This is a combinational always block
        // State transition logic
        if (state != next_state)
            
            
    end
	*/
    always @(posedge clk, posedge areset) begin    // This is a sequential always block
        // State flip-flops with asynchronous reset
        if (areset) begin 
            state <= B;
        end
        else begin
            state <= (in == 1) ?  state : ~state;
        end
        
        next_state = state;
    end

    // Output logic
            assign out = (state == A) ? 0 : 1;

endmodule


// correction: this is what was intended:
/*
   always@(*) begin
		case (state)
			A: next = in ? A : B;
			B: next = in ? B : A;
		endcase
    end
    
    
    
    // Edge-triggered always block (DFFs) for state flip-flops. Asynchronous reset.
    always @(posedge clk, posedge areset) begin
		if (areset) state <= B;		// Reset to state B
        else state <= next;			// Otherwise, cause the state to transition
	end
		
		
		
	// Combinational output logic. In this problem, an assign statement is the simplest.
	// In more complex circuits, a combinational always block may be more suitable.
	assign out = (state==B);
*/
