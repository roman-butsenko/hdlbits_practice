module top_module (
    input clk,
    input reset,
    input [3:1] s,
    output fr3,
    output fr2,
    output fr1,
    output dfr
); 
    
    initial begin
        fr3 = 1'b1;
    end
    // here I'll utulize the one-hot encoding and states derived by inspection,
    // since it looked really intuitive to me
    
    reg [3:0] state;		// register, that has the current state
    reg [3:0] next_state;   // register, that has the next state

    //the variable that controles the supplemental flow rate controller
    reg [0:0] supplem_flow = 1'b0;
    
    parameter S0 = 0, S1 = 1, S2 = 2, S3 = 3;

    assign next_state [S0] = ~s[1] & ~s[2] & ~s[3];
    assign next_state [S1] = s[1] & ~s[2] & ~s[3];
    assign next_state [S2] = s[1] & s[2] & ~s[3];
    assign next_state [S3] = s[1] & s[2] & s[3];
    
    // block that defines outputs
    always @(posedge clk) begin
        
        if (reset) begin
            state <= 4'b0001;
        end
    
    	else begin
            
            
            if (next_state != state) 
            	supplem_flow <= (next_state < state);
        	
            state <= next_state;
            
            // sipplem_valve should be opened only when
            // transutuoning from the state with higher water level to the
            // state with lower water level
    
            // one-hot encoding with reversed case statement
    
            case (state)
                4'b0001:
                begin
                    dfr <= supplem_flow[0];
                    fr1 <= 1'b1;
                    fr2 <= 1'b1;
                    fr3 <= 1'b1;
                    
                end
                4'b0010: 
                begin
                    dfr <= supplem_flow[0];
                    fr1 <= 1'b1;
                    fr2 <= 1'b1;
                    fr3 <= 1'b0;
                    
                end
                4'b0100: 
                begin
                    dfr <= supplem_flow[0];
                    fr1 <= 1'b1;
                    fr2 <= 1'b0;
                    fr3 <= 1'b0;
                    
                end
                4'b1000: 
                begin
                    dfr <= supplem_flow[0];
                    fr1 <= 1'b0;
                    fr2 <= 1'b0;
                    fr3 <= 1'b0;
                    
                end
            endcase
        end
    end

endmodule
